<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz: Class Relationships (without Inheritance)</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .quiz-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
            max-width: 800px;
            width: 100%;
            position: relative;
            overflow: hidden;
        }

        .quiz-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
        }

        .quiz-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .quiz-title {
            font-size: 2.5rem;
            color: #2c3e50;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .quiz-subtitle {
            font-size: 1.2rem;
            color: #7f8c8d;
            font-weight: 300;
        }

        .question-container {
            margin-bottom: 30px;
        }

        .question-title {
            font-size: 1.4rem;
            color: #2c3e50;
            margin-bottom: 25px;
            font-weight: 600;
        }

        .diagram-container {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 25px;
            border: 2px solid #e9ecef;
        }

        .relationship-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .relationship-item:last-child {
            margin-bottom: 0;
        }

        .class-box {
            background: #34495e;
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.1rem;
            min-width: 80px;
            text-align: center;
        }

        .connection-line {
            flex: 1;
            height: 3px;
            background: #bdc3c7;
            margin: 0 20px;
            position: relative;
            border-radius: 2px;
        }

        .connection-line.association {
            background: #3498db;
        }

        .connection-line.aggregation::after {
            content: '◇';
            position: absolute;
            right: -8px;
            top: -12px;
            font-size: 20px;
            color: #e74c3c;
        }

        .connection-line.composition::after {
            content: '◆';
            position: absolute;
            right: -8px;
            top: -12px;
            font-size: 20px;
            color: #2c3e50;
        }

        .options-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .option-button {
            background: #ecf0f1;
            border: 3px solid #bdc3c7;
            border-radius: 12px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .option-button:hover {
            background: #d5dbdb;
            border-color: #95a5a6;
            transform: translateY(-2px);
        }

        .option-button.selected {
            background: #3498db;
            border-color: #2980b9;
            color: white;
            transform: translateY(-2px);
        }

        .option-button.correct {
            background: #2ecc71;
            border-color: #27ae60;
            color: white;
        }

        .option-button.incorrect {
            background: #e74c3c;
            border-color: #c0392b;
            color: white;
        }

        .submit-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 15px 40px;
            font-size: 1.2rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: block;
            margin: 0 auto;
        }

        .submit-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .submit-button:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .result-container {
            margin-top: 25px;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            font-weight: 600;
            display: none;
        }

        .result-container.show {
            display: block;
        }

        .result-container.correct {
            background: #d5f4e6;
            color: #27ae60;
            border: 2px solid #2ecc71;
        }

        .result-container.incorrect {
            background: #fadbd8;
            color: #c0392b;
            border: 2px solid #e74c3c;
        }

        .explanation {
            margin-top: 15px;
            font-weight: 400;
            font-size: 1rem;
            line-height: 1.6;
        }

        .score-container {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 12px;
            display: none;
        }

        .score-container.show {
            display: block;
        }

        .final-score {
            font-size: 2rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .reset-button {
            background: #95a5a6;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 30px;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 15px;
            transition: all 0.3s ease;
        }

        .reset-button:hover {
            background: #7f8c8d;
        }
    </style>
</head>
<body>
    <div class="quiz-container">
        <div class="quiz-header">
            <h1 class="quiz-title">Quiz: Class Relationships</h1>
            <p class="quiz-subtitle">Connection between Classes (without Inheritance)</p>
        </div>

        <div id="question1" class="question-container">
            <h2 class="question-title">Frage 1: Welche Art von Beziehung zeigt Diagramm 1?</h2>
            <div class="diagram-container">
                <div class="relationship-item">
                    <div class="class-box">A</div>
                    <div class="connection-line association"></div>
                    <div class="class-box">B</div>
                </div>
            </div>
            <div class="options-container">
                <button class="option-button" data-answer="association">Association</button>
                <button class="option-button" data-answer="aggregation">Aggregation</button>
                <button class="option-button" data-answer="composition">Composition</button>
                <button class="option-button" data-answer="dependency">Dependency</button>
            </div>
            <button class="submit-button" onclick="checkAnswer(1, 'association')">Antwort überprüfen</button>
            <div class="result-container" id="result1">
                <div class="explanation"></div>
            </div>
        </div>

        <div id="question2" class="question-container" style="display: none;">
            <h2 class="question-title">Frage 2: Welche Art von Beziehung zeigt Diagramm 2?</h2>
            <div class="diagram-container">
                <div class="relationship-item">
                    <div class="class-box">A</div>
                    <div class="connection-line aggregation"></div>
                    <div class="class-box">B</div>
                </div>
            </div>
            <div class="options-container">
                <button class="option-button" data-answer="association">Association</button>
                <button class="option-button" data-answer="aggregation">Aggregation</button>
                <button class="option-button" data-answer="composition">Composition</button>
                <button class="option-button" data-answer="dependency">Dependency</button>
            </div>
            <button class="submit-button" onclick="checkAnswer(2, 'aggregation')">Antwort überprüfen</button>
            <div class="result-container" id="result2">
                <div class="explanation"></div>
            </div>
        </div>

        <div id="question3" class="question-container" style="display: none;">
            <h2 class="question-title">Frage 3: Welche Art von Beziehung zeigt Diagramm 3?</h2>
            <div class="diagram-container">
                <div class="relationship-item">
                    <div class="class-box">A</div>
                    <div class="connection-line composition"></div>
                    <div class="class-box">B</div>
                </div>
            </div>
            <div class="options-container">
                <button class="option-button" data-answer="association">Association</button>
                <button class="option-button" data-answer="aggregation">Aggregation</button>
                <button class="option-button" data-answer="composition">Composition</button>
                <button class="option-button" data-answer="dependency">Dependency</button>
            </div>
            <button class="submit-button" onclick="checkAnswer(3, 'composition')">Antwort überprüfen</button>
            <div class="result-container" id="result3">
                <div class="explanation"></div>
            </div>
        </div>

        <div class="score-container" id="scoreContainer">
            <div class="final-score" id="finalScore"></div>
            <p>Gut gemacht! Du hast das Quiz abgeschlossen.</p>
            <button class="reset-button" onclick="resetQuiz()">Quiz wiederholen</button>
        </div>
    </div>

    <script>
        let currentQuestion = 1;
        let score = 0;
        let totalQuestions = 3;
        let selectedAnswers = {};

        const explanations = {
            1: {
                correct: "Richtig! Das ist eine Association - eine einfache Beziehung zwischen zwei Klassen ohne spezielle Symbole.",
                incorrect: "Leider falsch. Das ist eine Association - erkennbar an der einfachen Linie ohne spezielle Symbole."
            },
            2: {
                correct: "Richtig! Das ist eine Aggregation - erkennbar am leeren Diamanten (◇), der eine 'hat-ein' Beziehung zeigt.",
                incorrect: "Leider falsch. Das ist eine Aggregation - erkennbar am leeren Diamanten (◇)."
            },
            3: {
                correct: "Richtig! Das ist eine Composition - erkennbar am gefüllten Diamanten (◆), der eine starke 'ist-Teil-von' Beziehung zeigt.",
                incorrect: "Leider falsch. Das ist eine Composition - erkennbar am gefüllten Diamanten (◆)."
            }
        };

        // Option selection handling
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('option-button')) {
                const questionContainer = e.target.closest('.question-container');
                const questionId = questionContainer.id.replace('question', '');
                
                // Remove selection from other options in this question
                questionContainer.querySelectorAll('.option-button').forEach(btn => {
                    btn.classList.remove('selected');
                });
                
                // Add selection to clicked option
                e.target.classList.add('selected');
                selectedAnswers[questionId] = e.target.dataset.answer;
                
                // Enable submit button
                const submitButton = questionContainer.querySelector('.submit-button');
                submitButton.disabled = false;
            }
        });

        function checkAnswer(questionNum, correctAnswer) {
            const selectedAnswer = selectedAnswers[questionNum];
            const questionContainer = document.getElementById(`question${questionNum}`);
            const resultContainer = document.getElementById(`result${questionNum}`);
            const options = questionContainer.querySelectorAll('.option-button');
            const submitButton = questionContainer.querySelector('.submit-button');
            
            if (!selectedAnswer) return;
            
            // Disable all options and submit button
            options.forEach(option => {
                option.style.pointerEvents = 'none';
                if (option.dataset.answer === correctAnswer) {
                    option.classList.add('correct');
                } else if (option.dataset.answer === selectedAnswer && selectedAnswer !== correctAnswer) {
                    option.classList.add('incorrect');
                }
            });
            
            submitButton.disabled = true;
            
            // Show result
            const isCorrect = selectedAnswer === correctAnswer;
            if (isCorrect) {
                score++;
                resultContainer.classList.add('correct');
                resultContainer.querySelector('.explanation').textContent = explanations[questionNum].correct;
            } else {
                resultContainer.classList.add('incorrect');
                resultContainer.querySelector('.explanation').textContent = explanations[questionNum].incorrect;
            }
            
            resultContainer.classList.add('show');
            
            // Show next question or final score after delay
            setTimeout(() => {
                if (currentQuestion < totalQuestions) {
                    document.getElementById(`question${currentQuestion}`).style.display = 'none';
                    currentQuestion++;
                    document.getElementById(`question${currentQuestion}`).style.display = 'block';
                } else {
                    // Show final score
                    showFinalScore();
                }
            }, 3000);
        }

        function showFinalScore() {
            document.getElementById(`question${currentQuestion}`).style.display = 'none';
            const scoreContainer = document.getElementById('scoreContainer');
            const finalScore = document.getElementById('finalScore');
            
            finalScore.textContent = `${score}/${totalQuestions} Punkte`;
            scoreContainer.classList.add('show');
        }

        function resetQuiz() {
            // Reset variables
            currentQuestion = 1;
            score = 0;
            selectedAnswers = {};
            
            // Hide score container
            document.getElementById('scoreContainer').classList.remove('show');
            
            // Reset all questions
            for (let i = 1; i <= totalQuestions; i++) {
                const questionContainer = document.getElementById(`question${i}`);
                const resultContainer = document.getElementById(`result${i}`);
                const options = questionContainer.querySelectorAll('.option-button');
                const submitButton = questionContainer.querySelector('.submit-button');
                
                // Hide all questions except first
                questionContainer.style.display = i === 1 ? 'block' : 'none';
                
                // Reset options
                options.forEach(option => {
                    option.classList.remove('selected', 'correct', 'incorrect');
                    option.style.pointerEvents = 'auto';
                });
                
                // Reset submit button
                submitButton.disabled = true;
                
                // Reset result container
                resultContainer.classList.remove('show', 'correct', 'incorrect');
                resultContainer.querySelector('.explanation').textContent = '';
            }
        }
    </script>
</body>
</html>